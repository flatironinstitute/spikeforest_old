#!/usr/bin/env python

import os
import sys
import argparse
import json
from mountaintools import client as mt
from mlprocessors import MountainJob

# @mtlogging.log(root=True)
def main():
    """main routine
    """

    parser = argparse.ArgumentParser(
        description='Execute a MountainTools job given in an input .json file')
    parser.add_argument('job_path', help='path of the input job file')
    parser.add_argument('result_path', help='path of the output result file')
    parser.add_argument('--input', help='path to JSON file containing input and parameter values to substitute', required=False, default=None)
    parser.add_argument('--download-from', required=False, default=None)

    args = parser.parse_args()

    if args.download_from:
        mt.configDownloadFrom([args.download_from])

    job_object = mt.loadObject(path=args.job_path)
    if not job_object:
        print('Unable to load job object.', file=sys.stderr)
        exit(-1)
    JJ = MountainJob(job_object=job_object)

    if args.input is not None:
        input_obj = mt.loadObject(path=args.input)
        if not input_obj:
            print('Unable to load input object: {}'.format(args.input), file=sys.stderr)
            exit(-1)
        JJ.substituteInputsAndParameters(**input_obj)

    files_to_realize = JJ.getFilesToRealize()
    for ff in files_to_realize:
        if not mt.realizeFile(ff):
            print('Unable to realize file: {}'.format(ff))
            exit(-1)
    
    JJ.execute()

    mt.saveObject(object=JJ.result.getObject(), dest_path=args.result_path, indent=4)

if __name__ == "__main__":
    main()
